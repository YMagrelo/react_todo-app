{"version":3,"sources":["components/CreateNewTodo/CreateNewTodo.js","components/TodoList/Todo.js","components/TodoList/TodoList.js","components/Filters/Filters.js","App.js","index.js"],"names":["CreateNewTodo","state","title","handleInputChange","value","target","setState","handleSubmit","event","preventDefault","addTodo","props","length","completed","id","uuidv4","this","className","onSubmit","placeholder","onChange","onKeyUp","handleSubmitEnter","React","Component","Todo","deleteTodo","completedTodo","cn","type","checked","htmlFor","onClick","TodoList","toggleCompletedAll","todos","map","todo","key","Filters","filter","handleFilter","clearCompleted","selected","App","prevState","setFilter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef80d5f5.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport uuidv4 from 'uuid/v4';\n\nexport class CreateNewTodo extends React.Component {\n  state = {\n    title: '',\n  }\n\n  handleInputChange = ({ target }) => {\n    const { value } = target;\n\n    this.setState({\n      title: value,\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const { title } = this.state;\n    const { addTodo } = this.props;\n\n    if (title.length > 0) {\n      addTodo({\n        title,\n        completed: false,\n        id: uuidv4(),\n      });\n    }\n\n    this.setState({\n      title: '',\n    });\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onChange={this.handleInputChange}\n            onKeyUp={this.handleSubmitEnter}\n            value={title}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nCreateNewTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nexport const Todo = (props) => {\n  const {\n    title,\n    completed,\n    id,\n    deleteTodo,\n    completedTodo,\n  } = props;\n\n  return (\n    <li className={cn({ completed })}>\n      <div className=\"view\">\n        <input\n          id={id}\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={completed}\n          onChange={() => completedTodo(id)}\n        />\n        <label htmlFor=\"todo-1\">{title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(id)}\n        />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n  );\n};\n\nTodo.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  completedTodo: PropTypes.func.isRequired,\n  completed: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Todo } from './Todo';\n\nexport const TodoList = (props) => {\n  const {\n    deleteTodo,\n    completedTodo,\n    toggleCompletedAll,\n    todos,\n  } = props;\n\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        onClick={toggleCompletedAll}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n      <ul className=\"todo-list\">\n        {\n          todos.map(todo => (\n            <Todo\n              {...todo}\n              key={todo.id}\n              completedTodo={completedTodo}\n              deleteTodo={deleteTodo}\n            />\n          ))\n        }\n      </ul>\n    </section>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  completedTodo: PropTypes.func.isRequired,\n  toggleCompletedAll: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nexport const Filters = (props) => {\n  const {\n    todos,\n    filter,\n    handleFilter,\n    clearCompleted,\n  } = props;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {`${todos.filter(todo => !todo.completed).length} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <button\n            className={cn({ selected: filter === 'all' })}\n            type=\"button\"\n            onClick={() => handleFilter('all')}\n          >\n            All\n          </button>\n        </li>\n\n        <li>\n          <button\n            className={cn({ selected: filter === 'active' })}\n            type=\"button\"\n            onClick={() => handleFilter('active')}\n          >\n            Active\n          </button>\n        </li>\n\n        <li>\n          <button\n            className={cn({ selected: filter === 'completed' })}\n            type=\"button\"\n            onClick={() => handleFilter('completed')}\n          >\n            Completed\n          </button>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={clearCompleted}\n      >\n      Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFilters.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n  handleFilter: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport { CreateNewTodo } from './components/CreateNewTodo/CreateNewTodo';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { Filters } from './components/Filters/Filters';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    filter: 'all',\n  };\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  }\n\n  deleteTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => (\n        todo.id !== id\n      )),\n    }));\n  }\n\n  completedTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => (\n        (todo.id === id)\n          ? {\n            ...todo,\n            completed: !todo.completed,\n          }\n          : todo\n      )),\n    }));\n  }\n\n  toggleCompletedAll = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: !todo.completed,\n      })),\n    }));\n  }\n\n  handleFilter = (filter) => {\n    this.setState({\n      filter,\n    });\n  }\n\n  setFilter = () => {\n    const { todos, filter } = this.state;\n\n    switch (filter) {\n      case 'active':\n        return todos.filter(todo => !todo.completed);\n      case 'completed':\n        return todos.filter(todo => todo.completed);\n      default:\n        return todos;\n    }\n  }\n\n  clearCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  render() {\n    const { todos, filter } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <CreateNewTodo addTodo={this.addTodo} />\n        <TodoList\n          deleteTodo={this.deleteTodo}\n          completedTodo={this.completedTodo}\n          toggleCompletedAll={this.toggleCompletedAll}\n          todos={this.setFilter()}\n        />\n        <Filters\n          todos={todos}\n          filter={filter}\n          handleFilter={this.handleFilter}\n          clearCompleted={this.clearCompleted}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}